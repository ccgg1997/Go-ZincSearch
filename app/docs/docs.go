// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/email": {
            "post": {
                "description": "Store an email entry (ItÂ´s an example to add a new email value).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email"
                ],
                "summary": "Index in zincsearch",
                "parameters": [
                    {
                        "description": "Email parameters",
                        "name": "emailData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.EmailData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/query": {
            "post": {
                "description": "Perform a search based on the given query. Please note that the query is a string. Search results",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email"
                ],
                "summary": "Search text in zincsearch",
                "parameters": [
                    {
                        "description": "Search parameters",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.QueryParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.SearchResult"
                        }
                    }
                }
            }
        },
        "/zinconection": {
            "get": {
                "description": "Check connectivity with ZincSearch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ZincSearch"
                ],
                "summary": "verify conectivity with ZincSearch",
                "responses": {
                    "200": {
                        "description": "La conectividad con ZincSearch esta activa, accede por medio de las peticiones HTTP de la api de email",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.EmailData": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "xfrom": {
                    "type": "string"
                },
                "xto": {
                    "type": "string"
                }
            }
        },
        "http.QueryParam": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string"
                }
            }
        },
        "http.SearchResult": {
            "type": "object",
            "properties": {
                "Emails Encontrados": {
                    "type": "string"
                }
            }
        },
        "http.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
